
if ~exist('colorbrewer.mat','file');
    error('Cannot fit to cbrewer without colorbrewer.mat');
end
CB = load('colorbrewer.mat');

ctypes={'div', 'seq', 'qual'};
ctypes_title={'Diverging', 'Sequential', 'Qualitative'};
cnames{1,:}={'BrBG', 'PiYG', 'PRGn', 'PuOr', 'RdBu', 'RdGy', 'RdYlBu', 'RdYlGn'};
cnames{2,:}={'Blues','BuGn','BuPu','GnBu','Greens','Greys','Oranges','OrRd','PuBu','PuBuGn','PuRd',...
             'Purples','RdPu', 'Reds', 'YlGn', 'YlGnBu', 'YlOrBr', 'YlOrRd'};
cnames{3,:}={'Accent', 'Dark2', 'Paired', 'Pastel1', 'Pastel2', 'Set1', 'Set2', 'Set3'};


% ncol=length(CB.colorbrewer.(ctypes{itype}).(cnames{itype}{iname}));

type = 'div';
name = 'RdYlBu';

cbtmp = CB.colorbrewer.(type).(name);
ncol = length(cbtmp);
cbrgb = cbtmp{ncol};
cbrgb = cbrgb/255;
cblab = rgb2lab(cbrgb);
cblch = lab2lch(cblab);

curveN    = 1000; % Proof of concept. Increase later.
curveTyp  = 'sin';
use_uplab = false;
oogcost       = 1000;
oogdistweight = 10;

switch type
    
    case 'qual'
        error('No need to find a best fitting colormap for a qualitative map');
        
        
    case 'div'
        mthd = 'makecmap_AwpBtwist';
        
        [maxc,imaxc] = max(cblch(:,2));
        cbL = sort(cblch(:,1));
        
        imid = ceil((ncol+1)/2);
        lch1edg = cblch(1     , :);
        lch1mid = cblch(imid-1, :);
        lch0mid = cblch(imid  , :);
        lch2mid = cblch(imid+1, :);
        lch2edg = cblch(end   , :);
        
        params = struct();
        params.n     = curveN;
        params.h1edg = lch1edg(1,3);
        params.h1mid = lch1mid(1,3);
        params.h2edg = lch2edg(1,3);
        params.h2mid = lch2mid(1,3);
        params.Ledg  = mean([lch1edg(1,1) lch2edg(1,1)]);
        params.Lmid  = max(cblch(:,1)); %lch0mid(1,1);
        params.c0    = 0; %min(cblch(:,2)); %lch0mid(1,2);
        params.Lmaxc = cblch(imaxc,1);
        params.maxc  = maxc;
        params.typ   = 'sin'; % I don't know which! Maybe try both?
        params.use_uplab = use_uplab;
        
        
        % Use fminunc to minimise squared error
        % Could use GlobalSearch to implement this over many starting
        % locations, but should be okay with this initialisation..?
        mkfun = @(x) makecmap_AwpBtwist( ...
            struct( ...
                'use_uplab' , use_uplab, ...
                'n'    , curveN, ...
                'typ'  , curveTyp, ...
                'h1edg', x(1), ...
                'h1mid', x(2), ...
                'h2edg', x(3), ...
                'h2mid', x(4), ...
                'Ledg' , x(5), ...
                'Lmid' , x(6), ...
                'c0'   , x(7), ...
                'Lmaxc', x(8), ...
                'maxc' , x(9) ) ...
            , false, 'lab' );
        Xinit = [...
            params.h1edg ...
            params.h1mid ...
            params.h2edg ...
            params.h2mid ...
            params.Ledg ...
            params.Lmid ...
            params.c0 ...
            params.Lmaxc ...
            params.maxc ...
            ];
        
        %         h1e h1m h2e h2m     Le         Lm  c0       LM      cM
        Xinit2 = [  0  15 180 190     30         80   0       50      20 ];
%       XLB    = [  0   0   0   0      0          0   0        0       0 ];
%       XUB    = [360 360 360 360    100        100 150      100     150 ];
        XLB    = [  0   0   0   0 cbL(1) cbL(end-3)   0     cbL(2)+2  30 ];
        XUB    = [360 360 360 360 cbL(2)        100   0 cbL(end-3)-2 150 ];
        
%         objfun = @(x) ...
%             sum( ...
%                 min( ...
%                     sum( ...
%                         ( ...
%                             bsxfun(@minus, cblab, permute(mkfun(x),[3 2 1])) ...
%                         ).^2 , ...
%                     2) , ...
%                 [], 3) , ...
%             1);
        
        g = fetch_cielchab_gamut();
        
        objfun = @(x) objfungen(x, mkfun, cblab, g, oogcost, oogdistweight);
        
%         [X,FVAL,EXITFLAG] = fminunc(objfun, Xinit);
%         
%         P = struct( ...
%             'use_uplab' , use_uplab, ...
%             'n'    , curveN, ...
%             'typ'  , curveTyp, ...
%             'h1edg', X(1), ...
%             'h1mid', X(2), ...
%             'h2edg', X(3), ...
%             'h2mid', X(4), ...
%             'Ledg' , X(5), ...
%             'Lmid' , X(6), ...
%             'c0'   , X(7), ...
%             'Lmaxc', X(8), ...
%             'maxc' , X(9));
%         
%         makecmap_AwpBtwist(P,1);
%         hold on;
%         plot3(cblab(:,2),cblab(:,3),cblab(:,1),'xw');
%         plot3(cblab(:,2),cblab(:,3),cblab(:,1),'-k');

        
        % GlobalSearch can only do fminunc, contrary to documentation!
%         problem = createOptimProblem('fminunc','objective', objfun, 'x0', Xinit);
        
        problem = createOptimProblem('fmincon', 'objective', objfun, 'x0', Xinit, 'lb', XLB, 'ub', XUB);
        
        [X2,FVAL,EXITFLAG] = fmincon(problem);
        
        
%         gs = GlobalSearch;
%         [X2, f] = run(gs, problem);
%         
%         P2 = struct( ...
%             'use_uplab' , use_uplab, ...
%             'n'    , curveN, ...
%             'typ'  , curveTyp, ...
%             'h1edg', X2(1), ...
%             'h1mid', X2(2), ...
%             'h2edg', X2(3), ...
%             'h2mid', X2(4), ...
%             'Ledg' , X2(5), ...
%             'Lmid' , X2(6), ...
%             'c0'   , X2(7), ...
%             'Lmaxc', X2(8), ...
%             'maxc' , X2(9));
%         
%         makecmap_AwpBtwist(P2,1);
%         hold on;
%         plot3(cblab(:,2),cblab(:,3),cblab(:,1),'xw');
%         plot3(cblab(:,2),cblab(:,3),cblab(:,1),'-k');
        
        
%         ms = MultiStart('UseParallel', 'always');
%         clear X2;
%         [X2,FVAL,EXITFLAG,OUTPUT,SOLUTIONS] = run(ms, problem, 10)
        
        P2 = struct( ...
            'use_uplab' , use_uplab, ...
            'n'    , curveN, ...
            'typ'  , curveTyp, ...
            'h1edg', X2(1), ...
            'h1mid', X2(2), ...
            'h2edg', X2(3), ...
            'h2mid', X2(4), ...
            'Ledg' , X2(5), ...
            'Lmid' , X2(6), ...
            'c0'   , X2(7), ...
            'Lmaxc', X2(8), ...
            'maxc' , X2(9));
        
        makecmap_AwpBtwist(P2,1);
        hold on;
        plot3(cblab(:,2),cblab(:,3),cblab(:,1),'xw');
        plot3(cblab(:,2),cblab(:,3),cblab(:,1),'-k');
        
        
        
    case 'seq'
        mthd = 'makecmap_pinchedspiral';
        
        params = struct();
        params.n     = n;
        params.h1    = cblch(2,3);
        params.h2    = cblch(end,3);
        params.Lmin  = cblch(end,1);
        params.Lmax  = cblch(1,1);
        params.maxc  = max(cblch(:,2));
        params.typ   = 'sin'; % I don't know which! Maybe try both?
        params.use_uplab = use_uplab;
        
        
    otherwise
        error('Non colorbrewer type provided');
        
end

% % mkcmpfun = str2func(['makecmap_' mthd]);
% mkcmpfun = str2func(mthd);
% 
% mkcmpfun(params,true);
% hold on;
% plot3(cblab(:,2),cblab(:,3),cblab(:,1),'xw');
% plot3(cblab(:,2),cblab(:,3),cblab(:,1),'-k');
